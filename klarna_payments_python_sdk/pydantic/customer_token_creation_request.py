# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from klarna_payments_python_sdk.pydantic.address import Address
from klarna_payments_python_sdk.pydantic.customer import Customer

class CustomerTokenCreationRequest(BaseModel):
    # Description of the purpose of the token.
    description: str = Field(alias='description')

    # Intended use for the token.
    intended_use: Literal["SUBSCRIPTION"] = Field(alias='intended_use')

    # RFC 1766 customer's locale.
    locale: str = Field(alias='locale')

    # ISO 3166 alpha-2 purchase country.
    purchase_country: str = Field(alias='purchase_country')

    # ISO 4217 purchase currency.
    purchase_currency: str = Field(alias='purchase_currency')

    billing_address: typing.Optional[Address] = Field(None, alias='billing_address')

    customer: typing.Optional[Customer] = Field(None, alias='customer')
    class Config:
        arbitrary_types_allowed = True
