# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from klarna_payments_python_sdk.pydantic.address import Address
from klarna_payments_python_sdk.pydantic.attachment import Attachment
from klarna_payments_python_sdk.pydantic.customer import Customer
from klarna_payments_python_sdk.pydantic.merchant_urls import MerchantUrls
from klarna_payments_python_sdk.pydantic.options import Options
from klarna_payments_python_sdk.pydantic.order_line import OrderLine
from klarna_payments_python_sdk.pydantic.payment_method_category import PaymentMethodCategory
from klarna_payments_python_sdk.pydantic.session_custom_payment_method_ids import SessionCustomPaymentMethodIds

class Session(BaseModel):
    # The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
    acquiring_channel: typing.Optional[Literal["ECOMMERCE", "IN_STORE", "TELESALES"]] = Field(None, alias='acquiring_channel')

    attachment: typing.Optional[Attachment] = Field(None, alias='attachment')

    # Authorization token.
    authorization_token: typing.Optional[str] = Field(None, alias='authorization_token')

    billing_address: typing.Optional[Address] = Field(None, alias='billing_address')

    # Token to be passed to the JS client
    client_token: typing.Optional[str] = Field(None, alias='client_token')

    custom_payment_method_ids: typing.Optional[SessionCustomPaymentMethodIds] = Field(None, alias='custom_payment_method_ids')

    customer: typing.Optional[Customer] = Field(None, alias='customer')

    # Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.
    design: typing.Optional[str] = Field(None, alias='design')

    # Session expiration date
    expires_at: typing.Optional[datetime] = Field(None, alias='expires_at')

    # Used to define the language and region of the customer. The locale follows the format of [RFC 1766](https://datatracker.ietf.org/doc/rfc1766/), meaning its value consists of language-country. Read more on **[Supported Locals and Currencies](https://docs.klarna.com/klarna-payments/in-depth-knowledge/puchase-countries-currencies-locales/)**.
    locale: typing.Optional[str] = Field(None, alias='locale')

    # Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
    merchant_data: typing.Optional[str] = Field(None, alias='merchant_data')

    # Used for storing merchant's internal order number or other reference.
    merchant_reference1: typing.Optional[str] = Field(None, alias='merchant_reference1')

    # Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).
    merchant_reference2: typing.Optional[str] = Field(None, alias='merchant_reference2')

    merchant_urls: typing.Optional[MerchantUrls] = Field(None, alias='merchant_urls')

    options: typing.Optional[Options] = Field(None, alias='options')

    # Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
    order_amount: typing.Optional[int] = Field(None, alias='order_amount')

    # The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
    order_lines: typing.Optional[typing.List[OrderLine]] = Field(None, alias='order_lines')

    # Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
    order_tax_amount: typing.Optional[int] = Field(None, alias='order_tax_amount')

    # Available payment method categories
    payment_method_categories: typing.Optional[typing.List[PaymentMethodCategory]] = Field(None, alias='payment_method_categories')

    # The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
    purchase_country: typing.Optional[str] = Field(None, alias='purchase_country')

    # The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
    purchase_currency: typing.Optional[str] = Field(None, alias='purchase_currency')

    shipping_address: typing.Optional[Address] = Field(None, alias='shipping_address')

    # The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.
    status: typing.Optional[Literal["complete", "incomplete"]] = Field(None, alias='status')

    # Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customerâ€™s session.
    intent: typing.Optional[Literal["buy", "tokenize", "buy_and_tokenize"]] = Field(None, alias='intent')
    class Config:
        arbitrary_types_allowed = True
