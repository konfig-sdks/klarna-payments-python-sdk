# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from klarna_payments_python_sdk.pydantic.address import Address
from klarna_payments_python_sdk.pydantic.customer_read_create_token import CustomerReadCreateToken

class CustomerTokenCreationResponse(BaseModel):
    # Generated customer token. This token will be used to create a new order for the subscription using the Create a New order using token API.
    token_id: str = Field(alias='token_id')

    billing_address: typing.Optional[Address] = Field(None, alias='billing_address')

    customer: typing.Optional[CustomerReadCreateToken] = Field(None, alias='customer')

    # Used to connect customers with payment method when it is present.
    payment_method_reference: typing.Optional[str] = Field(None, alias='payment_method_reference')

    # URL to redirect the customer to after placing the order. This is a Klarna URL where Klarna will place a cookie in the customer’s browser (if redirected) and redirect the customer back to the confirmation URL provided by the merchant. This is not a mandatory step but a recommended one to improve the returning customer’s experience.
    redirect_url: typing.Optional[str] = Field(None, alias='redirect_url')
    class Config:
        arbitrary_types_allowed = True
