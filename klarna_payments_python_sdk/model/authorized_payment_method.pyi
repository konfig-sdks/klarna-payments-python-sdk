# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_payments_python_sdk import schemas  # noqa: F401


class AuthorizedPaymentMethod(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INVOICE(cls):
                    return cls("invoice")
                
                @schemas.classproperty
                def FIXED_AMOUNT(cls):
                    return cls("fixed_amount")
                
                @schemas.classproperty
                def BASE_ACCOUNT(cls):
                    return cls("base_account")
                
                @schemas.classproperty
                def DIRECT_DEBIT(cls):
                    return cls("direct_debit")
                
                @schemas.classproperty
                def DIRECT_BANK_TRANSFER(cls):
                    return cls("direct_bank_transfer")
                
                @schemas.classproperty
                def B2B_INVOICE(cls):
                    return cls("b2b_invoice")
                
                @schemas.classproperty
                def CARD(cls):
                    return cls("card")
                
                @schemas.classproperty
                def SLICE_IT_BY_CARD(cls):
                    return cls("slice_it_by_card")
                
                @schemas.classproperty
                def PAY_LATER_BY_CARD(cls):
                    return cls("pay_later_by_card")
                
                @schemas.classproperty
                def PAY_BY_CARD(cls):
                    return cls("pay_by_card")
                
                @schemas.classproperty
                def FIXED_SUM_CREDIT(cls):
                    return cls("fixed_sum_credit")
                
                @schemas.classproperty
                def ALTERNATIVE_PAYMENT_METHOD(cls):
                    return cls("alternative_payment_method")
            number_of_days = schemas.Int32Schema
            number_of_installments = schemas.Int32Schema
            __annotations__ = {
                "type": type,
                "number_of_days": number_of_days,
                "number_of_installments": number_of_installments,
            }
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_days"]) -> MetaOapg.properties.number_of_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_installments"]) -> MetaOapg.properties.number_of_installments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "number_of_days", "number_of_installments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_days"]) -> typing.Union[MetaOapg.properties.number_of_days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_installments"]) -> typing.Union[MetaOapg.properties.number_of_installments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "number_of_days", "number_of_installments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        number_of_days: typing.Union[MetaOapg.properties.number_of_days, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        number_of_installments: typing.Union[MetaOapg.properties.number_of_installments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthorizedPaymentMethod':
        return super().__new__(
            cls,
            *args,
            type=type,
            number_of_days=number_of_days,
            number_of_installments=number_of_installments,
            _configuration=_configuration,
            **kwargs,
        )
