# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_payments_python_sdk import schemas  # noqa: F401


class Order(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "order_id",
        }
        
        class properties:
            order_id = schemas.StrSchema
        
            @staticmethod
            def authorized_payment_method() -> typing.Type['AuthorizedPaymentMethod']:
                return AuthorizedPaymentMethod
            fraud_status = schemas.StrSchema
            redirect_url = schemas.StrSchema
            __annotations__ = {
                "order_id": order_id,
                "authorized_payment_method": authorized_payment_method,
                "fraud_status": fraud_status,
                "redirect_url": redirect_url,
            }
    
    order_id: MetaOapg.properties.order_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_id"]) -> MetaOapg.properties.order_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorized_payment_method"]) -> 'AuthorizedPaymentMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fraud_status"]) -> MetaOapg.properties.fraud_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirect_url"]) -> MetaOapg.properties.redirect_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["order_id", "authorized_payment_method", "fraud_status", "redirect_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_id"]) -> MetaOapg.properties.order_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorized_payment_method"]) -> typing.Union['AuthorizedPaymentMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fraud_status"]) -> typing.Union[MetaOapg.properties.fraud_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirect_url"]) -> typing.Union[MetaOapg.properties.redirect_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["order_id", "authorized_payment_method", "fraud_status", "redirect_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        order_id: typing.Union[MetaOapg.properties.order_id, str, ],
        authorized_payment_method: typing.Union['AuthorizedPaymentMethod', schemas.Unset] = schemas.unset,
        fraud_status: typing.Union[MetaOapg.properties.fraud_status, str, schemas.Unset] = schemas.unset,
        redirect_url: typing.Union[MetaOapg.properties.redirect_url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Order':
        return super().__new__(
            cls,
            *args,
            order_id=order_id,
            authorized_payment_method=authorized_payment_method,
            fraud_status=fraud_status,
            redirect_url=redirect_url,
            _configuration=_configuration,
            **kwargs,
        )

from klarna_payments_python_sdk.model.authorized_payment_method import AuthorizedPaymentMethod
