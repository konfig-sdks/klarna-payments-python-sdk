# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_payments_python_sdk import schemas  # noqa: F401


class MerchantSession(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "client_token",
            "session_id",
        }
        
        class properties:
            
            
            class client_token(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
                    min_length = 0
            
            
            class session_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class payment_method_categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentMethodCategory']:
                        return PaymentMethodCategory
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PaymentMethodCategory'], typing.List['PaymentMethodCategory']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_method_categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentMethodCategory':
                    return super().__getitem__(i)
            __annotations__ = {
                "client_token": client_token,
                "session_id": session_id,
                "payment_method_categories": payment_method_categories,
            }
    
    client_token: MetaOapg.properties.client_token
    session_id: MetaOapg.properties.session_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_token"]) -> MetaOapg.properties.client_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session_id"]) -> MetaOapg.properties.session_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method_categories"]) -> MetaOapg.properties.payment_method_categories: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["client_token", "session_id", "payment_method_categories", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_token"]) -> MetaOapg.properties.client_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session_id"]) -> MetaOapg.properties.session_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method_categories"]) -> typing.Union[MetaOapg.properties.payment_method_categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["client_token", "session_id", "payment_method_categories", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        client_token: typing.Union[MetaOapg.properties.client_token, str, ],
        session_id: typing.Union[MetaOapg.properties.session_id, str, ],
        payment_method_categories: typing.Union[MetaOapg.properties.payment_method_categories, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantSession':
        return super().__new__(
            cls,
            *args,
            client_token=client_token,
            session_id=session_id,
            payment_method_categories=payment_method_categories,
            _configuration=_configuration,
            **kwargs,
        )

from klarna_payments_python_sdk.model.payment_method_category import PaymentMethodCategory
