# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_payments_python_sdk import schemas  # noqa: F401


class MerchantUrls(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class confirmation(
                schemas.StrSchema
            ):
                pass
            
            
            class notification(
                schemas.StrSchema
            ):
                pass
            
            
            class push(
                schemas.StrSchema
            ):
                pass
            
            
            class authorization(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "confirmation": confirmation,
                "notification": notification,
                "push": push,
                "authorization": authorization,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmation"]) -> MetaOapg.properties.confirmation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notification"]) -> MetaOapg.properties.notification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["push"]) -> MetaOapg.properties.push: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorization"]) -> MetaOapg.properties.authorization: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["confirmation", "notification", "push", "authorization", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmation"]) -> typing.Union[MetaOapg.properties.confirmation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notification"]) -> typing.Union[MetaOapg.properties.notification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["push"]) -> typing.Union[MetaOapg.properties.push, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorization"]) -> typing.Union[MetaOapg.properties.authorization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["confirmation", "notification", "push", "authorization", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        confirmation: typing.Union[MetaOapg.properties.confirmation, str, schemas.Unset] = schemas.unset,
        notification: typing.Union[MetaOapg.properties.notification, str, schemas.Unset] = schemas.unset,
        push: typing.Union[MetaOapg.properties.push, str, schemas.Unset] = schemas.unset,
        authorization: typing.Union[MetaOapg.properties.authorization, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantUrls':
        return super().__new__(
            cls,
            *args,
            confirmation=confirmation,
            notification=notification,
            push=push,
            authorization=authorization,
            _configuration=_configuration,
            **kwargs,
        )
