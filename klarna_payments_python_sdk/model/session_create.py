# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_payments_python_sdk import schemas  # noqa: F401


class SessionCreate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "order_amount",
            "purchase_country",
            "order_lines",
            "purchase_currency",
        }
        
        class properties:
            
            
            class order_amount(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            
            
            class order_lines(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 1000
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['OrderLine']:
                        return OrderLine
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OrderLine'], typing.List['OrderLine']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'order_lines':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OrderLine':
                    return super().__getitem__(i)
            
            
            class purchase_country(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Za-z]{2,2}$',
                    }]
            
            
            class purchase_currency(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Za-z]{3,3}$',
                    }]
            
            
            class acquiring_channel(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ECOMMERCE": "ECOMMERCE",
                        "IN_STORE": "IN_STORE",
                        "TELESALES": "TELESALES",
                    }
                
                @schemas.classproperty
                def ECOMMERCE(cls):
                    return cls("ECOMMERCE")
                
                @schemas.classproperty
                def IN_STORE(cls):
                    return cls("IN_STORE")
                
                @schemas.classproperty
                def TELESALES(cls):
                    return cls("TELESALES")
        
            @staticmethod
            def attachment() -> typing.Type['Attachment']:
                return Attachment
            authorization_token = schemas.StrSchema
        
            @staticmethod
            def billing_address() -> typing.Type['Address']:
                return Address
            
            
            class client_token(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
                    min_length = 0
        
            @staticmethod
            def custom_payment_method_ids() -> typing.Type['SessionCreateCustomPaymentMethodIds']:
                return SessionCreateCustomPaymentMethodIds
        
            @staticmethod
            def customer() -> typing.Type['Customer']:
                return Customer
            design = schemas.StrSchema
            expires_at = schemas.DateTimeSchema
            
            
            class locale(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$',
                    }]
            
            
            class merchant_data(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 6000
                    min_length = 0
            
            
            class merchant_reference1(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class merchant_reference2(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
        
            @staticmethod
            def merchant_urls() -> typing.Type['MerchantUrls']:
                return MerchantUrls
        
            @staticmethod
            def options() -> typing.Type['Options']:
                return Options
            
            
            class order_tax_amount(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            
            
            class payment_method_categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentMethodCategory']:
                        return PaymentMethodCategory
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PaymentMethodCategory'], typing.List['PaymentMethodCategory']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_method_categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentMethodCategory':
                    return super().__getitem__(i)
        
            @staticmethod
            def shipping_address() -> typing.Type['Address']:
                return Address
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "complete": "COMPLETE",
                        "incomplete": "INCOMPLETE",
                    }
                
                @schemas.classproperty
                def COMPLETE(cls):
                    return cls("complete")
                
                @schemas.classproperty
                def INCOMPLETE(cls):
                    return cls("incomplete")
            
            
            class intent(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "buy": "BUY",
                        "tokenize": "TOKENIZE",
                        "buy_and_tokenize": "BUY_AND_TOKENIZE",
                    }
                
                @schemas.classproperty
                def BUY(cls):
                    return cls("buy")
                
                @schemas.classproperty
                def TOKENIZE(cls):
                    return cls("tokenize")
                
                @schemas.classproperty
                def BUY_AND_TOKENIZE(cls):
                    return cls("buy_and_tokenize")
            __annotations__ = {
                "order_amount": order_amount,
                "order_lines": order_lines,
                "purchase_country": purchase_country,
                "purchase_currency": purchase_currency,
                "acquiring_channel": acquiring_channel,
                "attachment": attachment,
                "authorization_token": authorization_token,
                "billing_address": billing_address,
                "client_token": client_token,
                "custom_payment_method_ids": custom_payment_method_ids,
                "customer": customer,
                "design": design,
                "expires_at": expires_at,
                "locale": locale,
                "merchant_data": merchant_data,
                "merchant_reference1": merchant_reference1,
                "merchant_reference2": merchant_reference2,
                "merchant_urls": merchant_urls,
                "options": options,
                "order_tax_amount": order_tax_amount,
                "payment_method_categories": payment_method_categories,
                "shipping_address": shipping_address,
                "status": status,
                "intent": intent,
            }
    
    order_amount: MetaOapg.properties.order_amount
    purchase_country: MetaOapg.properties.purchase_country
    order_lines: MetaOapg.properties.order_lines
    purchase_currency: MetaOapg.properties.purchase_currency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_amount"]) -> MetaOapg.properties.order_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_lines"]) -> MetaOapg.properties.order_lines: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_country"]) -> MetaOapg.properties.purchase_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_currency"]) -> MetaOapg.properties.purchase_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acquiring_channel"]) -> MetaOapg.properties.acquiring_channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachment"]) -> 'Attachment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorization_token"]) -> MetaOapg.properties.authorization_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_address"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_token"]) -> MetaOapg.properties.client_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_payment_method_ids"]) -> 'SessionCreateCustomPaymentMethodIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> 'Customer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["design"]) -> MetaOapg.properties.design: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expires_at"]) -> MetaOapg.properties.expires_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_data"]) -> MetaOapg.properties.merchant_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_reference1"]) -> MetaOapg.properties.merchant_reference1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_reference2"]) -> MetaOapg.properties.merchant_reference2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_urls"]) -> 'MerchantUrls': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'Options': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_tax_amount"]) -> MetaOapg.properties.order_tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method_categories"]) -> MetaOapg.properties.payment_method_categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_address"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intent"]) -> MetaOapg.properties.intent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["order_amount", "order_lines", "purchase_country", "purchase_currency", "acquiring_channel", "attachment", "authorization_token", "billing_address", "client_token", "custom_payment_method_ids", "customer", "design", "expires_at", "locale", "merchant_data", "merchant_reference1", "merchant_reference2", "merchant_urls", "options", "order_tax_amount", "payment_method_categories", "shipping_address", "status", "intent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_amount"]) -> MetaOapg.properties.order_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_lines"]) -> MetaOapg.properties.order_lines: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_country"]) -> MetaOapg.properties.purchase_country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_currency"]) -> MetaOapg.properties.purchase_currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acquiring_channel"]) -> typing.Union[MetaOapg.properties.acquiring_channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachment"]) -> typing.Union['Attachment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorization_token"]) -> typing.Union[MetaOapg.properties.authorization_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_address"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_token"]) -> typing.Union[MetaOapg.properties.client_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_payment_method_ids"]) -> typing.Union['SessionCreateCustomPaymentMethodIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union['Customer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["design"]) -> typing.Union[MetaOapg.properties.design, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expires_at"]) -> typing.Union[MetaOapg.properties.expires_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union[MetaOapg.properties.locale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_data"]) -> typing.Union[MetaOapg.properties.merchant_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_reference1"]) -> typing.Union[MetaOapg.properties.merchant_reference1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_reference2"]) -> typing.Union[MetaOapg.properties.merchant_reference2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_urls"]) -> typing.Union['MerchantUrls', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['Options', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_tax_amount"]) -> typing.Union[MetaOapg.properties.order_tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method_categories"]) -> typing.Union[MetaOapg.properties.payment_method_categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_address"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intent"]) -> typing.Union[MetaOapg.properties.intent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["order_amount", "order_lines", "purchase_country", "purchase_currency", "acquiring_channel", "attachment", "authorization_token", "billing_address", "client_token", "custom_payment_method_ids", "customer", "design", "expires_at", "locale", "merchant_data", "merchant_reference1", "merchant_reference2", "merchant_urls", "options", "order_tax_amount", "payment_method_categories", "shipping_address", "status", "intent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        order_amount: typing.Union[MetaOapg.properties.order_amount, decimal.Decimal, int, ],
        purchase_country: typing.Union[MetaOapg.properties.purchase_country, str, ],
        order_lines: typing.Union[MetaOapg.properties.order_lines, list, tuple, ],
        purchase_currency: typing.Union[MetaOapg.properties.purchase_currency, str, ],
        acquiring_channel: typing.Union[MetaOapg.properties.acquiring_channel, str, schemas.Unset] = schemas.unset,
        attachment: typing.Union['Attachment', schemas.Unset] = schemas.unset,
        authorization_token: typing.Union[MetaOapg.properties.authorization_token, str, schemas.Unset] = schemas.unset,
        billing_address: typing.Union['Address', schemas.Unset] = schemas.unset,
        client_token: typing.Union[MetaOapg.properties.client_token, str, schemas.Unset] = schemas.unset,
        custom_payment_method_ids: typing.Union['SessionCreateCustomPaymentMethodIds', schemas.Unset] = schemas.unset,
        customer: typing.Union['Customer', schemas.Unset] = schemas.unset,
        design: typing.Union[MetaOapg.properties.design, str, schemas.Unset] = schemas.unset,
        expires_at: typing.Union[MetaOapg.properties.expires_at, str, datetime, schemas.Unset] = schemas.unset,
        locale: typing.Union[MetaOapg.properties.locale, str, schemas.Unset] = schemas.unset,
        merchant_data: typing.Union[MetaOapg.properties.merchant_data, str, schemas.Unset] = schemas.unset,
        merchant_reference1: typing.Union[MetaOapg.properties.merchant_reference1, str, schemas.Unset] = schemas.unset,
        merchant_reference2: typing.Union[MetaOapg.properties.merchant_reference2, str, schemas.Unset] = schemas.unset,
        merchant_urls: typing.Union['MerchantUrls', schemas.Unset] = schemas.unset,
        options: typing.Union['Options', schemas.Unset] = schemas.unset,
        order_tax_amount: typing.Union[MetaOapg.properties.order_tax_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payment_method_categories: typing.Union[MetaOapg.properties.payment_method_categories, list, tuple, schemas.Unset] = schemas.unset,
        shipping_address: typing.Union['Address', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        intent: typing.Union[MetaOapg.properties.intent, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SessionCreate':
        return super().__new__(
            cls,
            *args,
            order_amount=order_amount,
            purchase_country=purchase_country,
            order_lines=order_lines,
            purchase_currency=purchase_currency,
            acquiring_channel=acquiring_channel,
            attachment=attachment,
            authorization_token=authorization_token,
            billing_address=billing_address,
            client_token=client_token,
            custom_payment_method_ids=custom_payment_method_ids,
            customer=customer,
            design=design,
            expires_at=expires_at,
            locale=locale,
            merchant_data=merchant_data,
            merchant_reference1=merchant_reference1,
            merchant_reference2=merchant_reference2,
            merchant_urls=merchant_urls,
            options=options,
            order_tax_amount=order_tax_amount,
            payment_method_categories=payment_method_categories,
            shipping_address=shipping_address,
            status=status,
            intent=intent,
            _configuration=_configuration,
            **kwargs,
        )

from klarna_payments_python_sdk.model.address import Address
from klarna_payments_python_sdk.model.attachment import Attachment
from klarna_payments_python_sdk.model.customer import Customer
from klarna_payments_python_sdk.model.merchant_urls import MerchantUrls
from klarna_payments_python_sdk.model.options import Options
from klarna_payments_python_sdk.model.order_line import OrderLine
from klarna_payments_python_sdk.model.payment_method_category import PaymentMethodCategory
from klarna_payments_python_sdk.model.session_create_custom_payment_method_ids import SessionCreateCustomPaymentMethodIds
